<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Relatos de um Desenvolvedor Aventureiro]]></title><description><![CDATA[Um blog por Willian Krause]]></description><link>http://www.willcrisis.com</link><image><url>https://raw.githubusercontent.com/willcrisis/willcrisis.github.io/master/images/cover/chessboard.jpg</url><title>Relatos de um Desenvolvedor Aventureiro</title><link>http://www.willcrisis.com</link></image><generator>RSS for Node</generator><lastBuildDate>Mon, 13 Mar 2017 14:15:17 GMT</lastBuildDate><atom:link href="http://www.willcrisis.com/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Teste]]></title><description><![CDATA[<div class="paragraph">
<p>Isso é um teste</p>
</div>]]></description><link>http://www.willcrisis.com/2017/03/13/Teste.html</link><guid isPermaLink="true">http://www.willcrisis.com/2017/03/13/Teste.html</guid><dc:creator><![CDATA[Willian Krause]]></dc:creator><pubDate>Mon, 13 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Grails: Internacionalização em banco de dados e arquivos]]></title><description><![CDATA[<div class="paragraph">
<p>Fala, pessoal!</p>
</div>
<div class="paragraph">
<p>Estive pesquisando uma forma de gravar internacionalização em banco de dados para permitir que alguns textos da minha aplicação sejam alterados sem a necessidade de precisar subir uma nova versão no servidor, mas continuando a usar as chaves definidas nos arquivos <code>messages_*.properties</code> caso o texto não esteja definido no banco.</p>
</div>
<div class="paragraph">
<p>Depois de ver <a href="http://graemerocher.blogspot.com.br/2010/04/reading-i18n-messages-from-database.html">esse</a> e <a href="http://stackoverflow.com/questions/8100312/grails-i18n-from-database-but-default-back-to-file">esse</a> post, pude fazer esse esquema funcionar perfeitamente.</p>
</div>
<div class="paragraph">
<p>Primeiro de tudo, é preciso criar uma classe de domínio para armazenar os valores no banco:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">class Mensagem {
    String code
    Locale locale
    String text

    static mapping = {
        cache true
        columns {
            code index: 'idx_message_key'
            locale index: 'idx_message_key'
        }
    }

    String toString() {
        text
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Criei um índice para tornar a busca das mensagens mais rápida.</p>
</div>
<div class="paragraph">
<p>Depois, foi preciso criar a classe <code>DatabaseMessageSource</code> estendendo a classe <code>AbstractMessageSource</code>, que será a classe responsável por fazer a pesquisa no banco de dados e, caso não encontre um valor, retornar a chave definida em arquivo:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">class DatabaseMessageSource extends AbstractMessageSource {

    Ehcache messageCache
    def messageBundleMessageSource

    @Override
    protected MessageFormat resolveCode(String code, Locale locale) {
        def key = new MessageKey(code, locale)
        def format = messageCache.get(key)?.value
        if (!format) {
            Mensagem mensagem = Mensagem.findByCodeAndLocale(code, locale)

            if (mensagem ) {
                format = new MessageFormat(mensagem.text, mensagem.locale)
            } else {
                format = messageBundleMessageSource.resolveCode(code, locale)
            }
            messageCache.put(new Element(key, format))
        }
        return format
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Usei o EhCache para evitar que a cada exibição de página seja feita uma consulta no banco retornando os valores já encontrados em execuções anteriores, poupando assim uma quantidade razoável de recursos do servidor. Para configurar esse cache corretamente, primeiro é preciso criar a classe <code>MessageKey</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">@Immutable
class MessageKey implements Serializable {
    String code
    Locale locale
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Depois, é preciso dizer ao Spring para carregar os beans que acabamos de criar no <code>resources.groovy</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">messageCache(EhCacheFactoryBean) {
    timeToLive = 500
    // outras configurações de cache
}
messageSource(DatabaseMessageSource) {
    messageCache = messageCache
    messageBundleMessageSource = ref("messageBundleMessageSource")
}
messageBundleMessageSource(org.codehaus.groovy.grails.context.support.PluginAwareResourceBundleMessageSource) {
    basenames = "WEB-INF/grails-app/i18n/messages"
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Usamos a classe <code>PluginAwareResourceBundleMessageSource</code> porque, segundo <a href="http://stackoverflow.com/a/8204148">este</a> comentário, algumas mensagens de plugins podem ser ignoradas caso usemos alguma outra classe aqui.</p>
</div>
<div class="paragraph">
<p>Depois de fazer essa configuração, basta fazer o teste. Eu gerei o controlador e páginas para a classe <code>Mensagem</code> usando o comando <code>grails generate-all pacote.Mensagem</code>. Depois é só fazer os testes usando a tag <code>&lt;g:message&gt;</code> nas GSPs e a action <code>message(args)</code> nos controladores, e pronto! Sempre que for preciso sobrescrever um texto no sistema, basta criar um registro na tabela <code>Mensagem</code> e imediatamente a mensagem estará disponível, sem a necessidade de precisar subir uma nova versão da aplicação!// = Your Blog title</p>
</div>]]></description><link>http://www.willcrisis.com/2015/06/19/Grails-Internacionalizacao-em-banco-de-dados-e-arquivos.html</link><guid isPermaLink="true">http://www.willcrisis.com/2015/06/19/Grails-Internacionalizacao-em-banco-de-dados-e-arquivos.html</guid><category><![CDATA[grails]]></category><category><![CDATA[ desenvolvimento]]></category><category><![CDATA[ banco de código]]></category><dc:creator><![CDATA[Willian Krause]]></dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Grails: Rodando duas aplicações na mesma instância do Tomcat em subdomínios diferentes]]></title><description><![CDATA[<div class="paragraph">
<p>Recentemente precisei fazer deploy de duas aplicações Grails na mesma instância do Tomcat. Tudo seria simples, se não fosse o fato de que cada aplicação seria acessada pelo seu próprio subdomínio, e que a URL deveria ser algo parecido com <a href="http://aplicacao1.meudominio.com/controller/id" class="bare">http://aplicacao1.meudominio.com/controller/id</a></p>
</div>
<div class="paragraph">
<p>A princípio, basta configurar o servidor web Apache com o módulo mod_proxy configurado corretamente que tudo está resolvido. Porém, o Tomcat em sua configuração default adiciona o contexto de cada aplicação na URL que está sendo acessada. Como fazer então para que cada aplicação tenha seu subdomínio exclusivo?</p>
</div>
<div class="paragraph">
<p>A solução me tomou bastante tempo de pesquisa e testes baseados em tentativa e erro. Segue aqui a forma como consegui resolver meu problema.</p>
</div>
<div class="paragraph">
<p>Primeiro de tudo, precisei alterar o arquivo <code>server.xml</code> do Tomcat e fazer algumas alterações: Adicionar um novo Service, criar um Connector, definir uma Engine e um Host. Ficou mais ou menos assim (vou ocultar algumas partes do arquivo por não ser o foco):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;Server ...&gt;
    ...
    &lt;Service name="aplicacao1"&gt;
        &lt;Connector port="8081" protocol="HTTP/1.1"
            connectionTimeout="20000"
            redirectPort="8444"
            proxyName="aplicacao1.meudominio.com"
            proxyPort="80" /&gt;
        &lt;Engine name="aplicacao1" defaultHost="aplicacao1"&gt;
            &lt;Host name="aplicacao1" appBase="aplicacao1" unpackWARs="true" autoDeploy="true"&gt;
            &lt;/Host&gt;
        &lt;/Engine&gt;
    &lt;/Service&gt;

    &lt;Service name="aplicacao2"&gt;
        &lt;Connector port="8082" protocol="HTTP/1.1"
            connectionTimeout="20000"
            redirectPort="8445"
            proxyName="aplicacao2.meudominio.com"
            proxyPort="80" /&gt;
        &lt;Engine name="aplicacao2" defaultHost="aplicacao2"&gt;
            &lt;Host name="aplicacao2" appBase="aplicacao2" unpackWARs="true" autoDeploy="true"&gt;
            &lt;/Host&gt;
        &lt;/Engine&gt;
    &lt;/Service&gt;

    &lt;Service name="Catalina"&gt;
        &lt;Connector port="8080" protocol="HTTP/1.1"
            connectionTimeout="20000"
            URIEncoding="UTF-8"
            redirectPort="8443" /&gt;
            ... (aqui são as configurações default do Tomcat)
        &lt;/Service&gt;
&lt;/Server&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Depois de fazer essa configuração, dentro da pasta do Tomcat, criei as pastas aplicacao1 e aplicacao2, no mesmo nível em que a pasta webapps está. Também é preciso dar permissão 775 e mudar o proprietário dessas pastas para o usuário tomcat7.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># mkdir aplicacao1
# mkdir aplicacao2
# chmod 775 aplicacao1
# chmod 775 aplicacao2
# chown tomcat7 aplicacao1
# chown tomcat7 aplicacao2</code></pre>
</div>
</div>
<div class="paragraph">
<p>Vai ficar mais ou menos assim:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://www.willcrisis.com/images/tomcat-folders.JPG" alt="tomcat folders.JPG">
</div>
</div>
<div class="paragraph">
<p>Depois, eu copiei os WARs pra dentro da sua respectiva pasta e renomeei eles pra <code>ROOT.war</code>. Por fim, fiz as alterações no Apache para que o proxy redirecione corretamente as requisições:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;VirtualHost *:80&gt;
    ServerName aplicacao1.meudominio.com
    ServerAlias aplicacao1.meudominio.com

    ProxyRequests Off

    ErrorLog /var/log/apache2/error-aplicacao1.log

    &lt;Directory proxy:http://aplicacao1.meudominio.com:80&gt;
        Order Allow,Deny
        Allow from all
    &lt;/Directory&gt;

    &lt;Proxy aplicacao1.meudominio.com:80&gt;
        Order deny,allow
        Allow from all
    &lt;/Proxy&gt;

    ProxyPass / http://meudominio.com:8081/
    ProxyPassReverse / http://meudominio.com:8081/
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName aplicacao2.meudominio.com
    ServerAlias aplicacao2.meudominio.com

    ProxyRequests Off

    ErrorLog /var/log/apache2/error-aplicacao2.log

    &lt;Directory proxy:http://aplicacao2.meudominio.com:80&gt;
        Order Allow,Deny
        Allow from all
    &lt;/Directory&gt;

    &lt;Proxy aplicacao2.meudominio.com:80&gt;
        Order deny,allow
        Allow from all
    &lt;/Proxy&gt;

    ProxyPass / http://meudominio.com:8082/
    ProxyPassReverse / http://meudominio.com:8082/
&lt;/VirtualHost&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Depois é só reiniciar o Apache e o Tomcat e partir pro abraço!!</p>
</div>]]></description><link>http://www.willcrisis.com/2015/06/10/Grails-Rodando-duas-aplicacoes-na-mesma-instancia-do-Tomcat-em-subdominios-diferentes.html</link><guid isPermaLink="true">http://www.willcrisis.com/2015/06/10/Grails-Rodando-duas-aplicacoes-na-mesma-instancia-do-Tomcat-em-subdominios-diferentes.html</guid><category><![CDATA[desenvolvimento]]></category><category><![CDATA[ infraestrutura]]></category><category><![CDATA[ grails]]></category><category><![CDATA[ banco de código]]></category><dc:creator><![CDATA[Willian Krause]]></dc:creator><pubDate>Wed, 10 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Grails: Ordenar uma classe de domínio por mais de um campo]]></title><description><![CDATA[<div class="paragraph">
<p>Muitas vezes precisamos que os registros de uma classe de domínio venham ordenados por um determinado campo na listagem padrão. Isso é fácil de fazer em Grails! Basta definir o atributo <code>sort</code> dentro da seção <code>mapping</code> da nossa classe.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>static mapping = {
    sort 'campo'
}</pre>
</div>
</div>
<div class="paragraph">
<p>Se precisarmos especificar a ordem (ascendente ou descendente), também é bem simples:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>static mapping = {
    sort campo: 'asc' //ou 'desc'
}</pre>
</div>
</div>
<div class="paragraph">
<p>Mas como fazer para ordenar por dois campos ao mesmo tempo? Simples também:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>static mapping = {
    sort campo: 'asc', outroCampo: 'asc'
}</pre>
</div>
</div>
<div class="paragraph">
<p>Isso é possível pois o método <code>sort</code> definido dentro do bloco <code>mapping</code> recebe uma <code>String</code> ou um <code>Map</code> como parâmetro. Quando recebe um <code>Map</code>, ele é inteligente o suficiente para realizar a ordenação por todos os campos e ordens informados.</p>
</div>]]></description><link>http://www.willcrisis.com/2015/06/05/Grails-Ordenar-uma-classe-de-dominio-por-mais-de-um-campo.html</link><guid isPermaLink="true">http://www.willcrisis.com/2015/06/05/Grails-Ordenar-uma-classe-de-dominio-por-mais-de-um-campo.html</guid><category><![CDATA[desenvolvimento]]></category><category><![CDATA[ grails]]></category><category><![CDATA[ banco de código]]></category><dc:creator><![CDATA[Willian Krause]]></dc:creator><pubDate>Fri, 05 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Grails: Mapear enum para um campo Integer em vez de String]]></title><description><![CDATA[<div class="paragraph">
<p>Quem programa em Grails sabe que há uma certa limitação na hora de mapear enums dentro de uma classe de domínio. O comportamento padrão é que o <code>key</code> do valor será salvo no banco. O Grails também dá a opção de mapear o enum de forma <code>ordinal</code>, o que também é possível no Hibernate.</p>
</div>
<div class="paragraph">
<p>Mas imagine o seguinte cenário:
Você possui uma classe de domínio qualquer que possui um enum indicando um nível de dificuldade, conforme ilustrado abaixo:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">class DominioQualquer {
    NivelEnum nivel

    static mapping = {
    	nivel enumType: 'ordinal'
    }
}

enum NivelEnum {
    BAIXO
    MEDIO
    ALTO
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Neste caso, o Grails irá criar um mapeamento usando um campo inteiro no banco de dados. Mas e se, por algum motivo de força maior, você for forçado a incluir os níveis "Médio-Baixo" e "Médio-alto" ao seu domínio? Para facilitar a visualização do código, estruturaríamos o enum da seguinte forma:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">enum NivelEnum {
	BAIXO
	MEDIO_BAIXO
	MEDIO
	MEDIO_ALTO
	ALTO
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Porém isso iria quebrar os registros já incluídos, pois mudamos a ordem dos valores no enum! Como resolver isso?</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://www.willcrisis.com/images/defender.gif" alt="defender.gif">
</div>
</div>
<div class="paragraph">
<p>A solução é ridiculamente simples, mas que me tomou muito tempo de pesquisa: basta definir um campo chamado <code>id</code> dentro do enum e remover o <code>enumType</code> do mapeamento. Dessa forma, o Grails irá usar este campo para persistir no banco, em vez de usar o ordinal. Nosso código então fica assim:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">class DominioQualquer {
    NivelEnum nivel
}

enum NivelEnum {
    BAIXO(0)
    MEDIO_BAIXO(3)
    MEDIO(1)
    MEDIO_ALTO(4)
    ALTO(2)

    Integer id

    private NivelEnum(Integer id) {
        this.id = id
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Lembrando que o nome do campo PRECISA ser <code>id</code>. Já o tipo pode ser qualquer tipo conhecido do Hibernate que estenda <code>Serializable</code> (<code>String</code>, <code>Date</code>, <code>char</code>, etc&#8230;&#8203;).</p>
</div>]]></description><link>http://www.willcrisis.com/2015/05/08/Grails-Mapear-enum-para-um-campo-Integer-em-vez-de-String.html</link><guid isPermaLink="true">http://www.willcrisis.com/2015/05/08/Grails-Mapear-enum-para-um-campo-Integer-em-vez-de-String.html</guid><category><![CDATA[grails]]></category><category><![CDATA[ desenvolvimento]]></category><category><![CDATA[ banco de código]]></category><dc:creator><![CDATA[Willian Krause]]></dc:creator><pubDate>Fri, 08 May 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Preparando um projeto Cordova para publicação]]></title><description><![CDATA[<div class="paragraph">
<p>Na pasta platforms/android do projeto, executar os seguintes comandos:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>ant release
cd bin
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore ../../../keys/nome_do_arquivo.keystore AppName-release-unsigned.apk nome_do_alias_keystore
jarsigner -verify -verbose -certs AppName-release-unsigned.apk
zipalign -v 4 AppName-release-unsigned.apk AppName.apk</pre>
</div>
</div>]]></description><link>http://www.willcrisis.com/2015/01/23/Preparando-um-projeto-Cordova-para-publicacao.html</link><guid isPermaLink="true">http://www.willcrisis.com/2015/01/23/Preparando-um-projeto-Cordova-para-publicacao.html</guid><category><![CDATA[banco de código]]></category><category><![CDATA[ desenvolvimento]]></category><category><![CDATA[ mobile]]></category><category><![CDATA[ cordova]]></category><dc:creator><![CDATA[Willian Krause]]></dc:creator><pubDate>Fri, 23 Jan 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[DigitalOcean: Hospedagem na nuvem de forma rápida e fácil]]></title><description><![CDATA[<div class="paragraph">
<p>Fala, pessoal! Quanto tempo, hein?</p>
</div>
<div class="paragraph">
<p>2 anos depois da última postagem, estou de volta! Muita coisa aconteceu nesse meio-tempo (muito-tempo, na verdade). Os próximos posts vão relatar as mudanças!</p>
</div>
<div class="paragraph">
<p>Mas hoje, vamos falar um pouco de nuvem, esse assunto que anda tão na moda.</p>
</div>
<div class="paragraph">
<p>Depois de pagar caro por hospedagens de sites, sofrer com problemas de permissões de arquivos, FTPs lentos e outras coisas, decidi experimentar uma coisa diferente: servidores na nuvem.</p>
</div>
<div class="paragraph">
<p>Uma das coisas que mais me deixava irritado nas hospedagens convencionais era quando eu fazia upload de um arquivo usando o Wordpress (ou o Joomla) e o mesmo era atribuído a um usuário que eu desconhecia. Dessa forma, eu ficava impossibilitado de editar, ou até mesmo de excluir esse arquivo. Tinha, então, que abrir um ticket pro suporte da hospedagem pedindo para excluírem o arquivo pra mim.</p>
</div>
<div class="paragraph">
<p>Com um servidor na nuvem, esse problema não acontece: o servido é seu, então fica mais fácil de resolver esse tipo de situação. Também podemos criar o servidor do nosso jeito, instalando os aplicativos que precisarmos.</p>
</div>
<div class="paragraph">
<p>Experimentei por um tempo o Amazon EC2, que por sinal é muito bom, possui algumas imagens de servidores pré-carregadas, é de fácil utilização e dá 1 ano grátis se o seu servidor estiver dentro do Free-Tier. Porém, quando subi um aplicativo Grails lá (aplicativo simples, sem muitos plugins nem operações complexas), o processamento e a memória dispararam e acabei pagando um valor um pouco alto.</p>
</div>
<div class="paragraph">
<p>Foi aí que um amigo, o <a href="http://www.emilio2hd.com.br">Emílio</a>, falou sobre o <a href="https://www.digitalocean.com/?refcode=a8cd65b5d607">DigitalOcean</a>, um serviço que disponibiliza um servidor da mesma maneira que o Amazon EC2, porém com o custo fixo de 5 dólares por mês no plano básico.</p>
</div>
<div class="paragraph">
<p>No começo fiquei meio receoso, pois nunca tinha ouvido falar no serviço, mas depois de algumas pesquisas na internet, vi que o mesmo é bem avaliado por muita gente.</p>
</div>
<div class="paragraph">
<p>Arrisquei e fiz a conta. O servidor ficou disponível para mim em menos de 1 minuto, com Ubuntu 12.04 e acesso SSH imediato.</p>
</div>
<div class="paragraph">
<p>É possível encontrar muito material e "HowTo"s na comunidade, o que faz com que seja muito fácil de se configurar o que for necessário.</p>
</div>
<div class="paragraph">
<p>Venho brincando nesse servidor há alguns dias e, muito em breve, irei migrar o site e meus projetos pessoais para lá.</p>
</div>
<div class="paragraph">
<p>Se estiver interessado, pode acessar por esse link e me garantir alguns créditos (o DigitalOcean trabalha com esquema de referências :D):</p>
</div>
<div class="paragraph">
<p><a href="https://www.digitalocean.com/?refcode=a8cd65b5d607" class="bare">https://www.digitalocean.com/?refcode=a8cd65b5d607</a></p>
</div>
<div class="paragraph">
<p>Se tiverem perguntas, dúvidas, sugestões, não hesitem em comentar!</p>
</div>]]></description><link>http://www.willcrisis.com/2013/11/13/Digital-Ocean-Hospedagem-na-nuvem-de-forma-rapida-e-facil.html</link><guid isPermaLink="true">http://www.willcrisis.com/2013/11/13/Digital-Ocean-Hospedagem-na-nuvem-de-forma-rapida-e-facil.html</guid><category><![CDATA[infraestrututra]]></category><category><![CDATA[ servidores]]></category><category><![CDATA[ desenvolvimento]]></category><dc:creator><![CDATA[Willian Krause]]></dc:creator><pubDate>Wed, 13 Nov 2013 00:00:00 GMT</pubDate></item></channel></rss>